package util

import (
	"fmt"
	"reflect"
	"testing"
	"wallet-svc/dto/req"
)

func TestAddrLen(t *testing.T)  {
	fmt.Println(len("0x3bD6361959306B1b50797D3ff82B9A43541c3e47"))
}


func TestHashLen(t *testing.T)  {
	fmt.Println(len("0xaf4a11b7bf6dc0d734de90b04306af3198a197adacd8d2efcd0929d2b7d5b200"))
}

func TestIsNumber(t *testing.T) {
	str := "aaa"
	b := IsNumber(str)
	fmt.Printf("b=%t\n",b)
}

func TestCutAddress(t *testing.T) {
	la := "0x0000000000000000000000003bd6361959306b1b50797d3ff82b9a43541c3e47"
	sa := CutAddress(la)
	fmt.Printf("addr=%s\n",sa)
	fmt.Printf("addr=%s\n","0x3bd6361959306b1b50797d3ff82b9a43541c3e47")
}

func TestDataToValue(t *testing.T) {
	data := "0x0000000000000000000000000000000000000000000000000000000000000457"
	v := DataToValue(data)
	fmt.Printf("%s\n",v)
}

func TestEq(t *testing.T)  {
	h1 := "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"
	h2 := "+QeKAYCDD0JAgIC5BxhgYGBAUmnTwhvOzO2hAAAAYABVNBVhAB1XYACA/VtgAYBUYAFgoGACCgMzgRZgAWCgYAIKAxmQkhaRkJEXkYKQVWAAgFSSkJEWgVJgAmAgUmBAkCBVYQa1gGEAY2AAOWAA8wBgYGBAUmAENhBhAKNXY/////98AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgADUEFmMG/d4DgRRhALNXgGMJXqezFGEBPVeAYxgWDd0UYQFzV4BjI7hy3RRhAZhXgGMxPOVnFGEBwFeAY3CggjEUYQHpV4BjjaXLWxRhAghXgGOV2JtBFGECN1eAY6kFnLsUYQJKV4Bj3WLtPhRhAmxXWzQVYQCuV2AAgP1bYACA/Vs0FWEAvldgAID9W2EAxmECkVZbYEBRYCCAglKBkIEBg4GBUYFSYCABkVCAUZBgIAGQgIODYABbg4EQFWEBAleAggFRg4IBUmAgAWEA6lZbUFBQUJBQkIEBkGAfFoAVYQEvV4CCA4BRYAGDYCADYQEACgMZFoFSYCABkVBbUJJQUFBgQFGAkQOQ81s0FWEBSFdgAID9W2EBX2ABYKBgAgoDYAQ1FmAkNWECyFZbYEBRkBUVgVJgIAFgQFGAkQOQ81s0FWEBfldgAID9W2EBhmEDNVZbYEBRkIFSYCABYEBRgJEDkPNbNBVhAaNXYACA/VthAV9gAWCgYAIKA2AENYEWkGAkNRZgRDVhAztWWzQVYQHLV2AAgP1bYQHTYQUwVltgQFFg/5CRFoFSYCABYEBRgJEDkPNbNBVhAfRXYACA/VthAYZgAWCgYAIKA2AENRZhBTVWWzQVYQITV2AAgP1bYQIbYQVQVltgQFFgAWCgYAIKA5CRFoFSYCABYEBRgJEDkPNbNBVhAkJXYACA/VthAMZhBV9WWzQVYQJVV2AAgP1bYQFfYAFgoGACCgNgBDUWYCQ1YQWWVls0FWECd1dgAID9W2EBhmABYKBgAgoDYAQ1gRaQYCQ1FmEGXlZbYECAUZCBAWBAUmAJgVJ/Qk9YIFRva2VuAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgIIIBUoFWW2ABYKBgAgoDM4EWYACBgVJgA2AgkIFSYECAgyCUhxaAhFKUkJFSgIIghZBVkJKRkH+MW+Hl6+x9W9FPcUJ9HoTz3QMUwPeyKR5bIArIx8O5JZCFkFGQgVJgIAFgQFGAkQOQo1BgAVuSkVBQVltgAFSQVltgAWCgYAIKA4MWYACQgVJgAmAgUmBAgSBUgpAQgBWQYQOLV1BgAWCgYAIKA4CFFmAAkIFSYANgIJCBUmBAgIMgM5CUFoNSkpBSIFSCkBAVW4AVYQOXV1BgAIIRW4AVYQO8V1BgAWCgYAIKA4MWYACQgVJgAmAgUmBAkCBUgoEBEVsVYQRLV2ABYKBgAgoDgIUWYACBgVJgAmAggYFSYECAhCCAVImQA5BVYAOCUoCEIDOHFoVSglKAhCCAVImQA5BVlIgWgIRSkZBSkIOQIIBUhgGQVZF/3fJSrRviyJtpwrBo/DeNqpUrp/FjxKEWKPVaTfUjs++QhZBRkIFSYCABYEBRgJEDkKNQYAFhBSlWW2ABVDNgAWCgYAIKA5CBFpEWFIAVYQSCV1BgAWCgYAIKA4QWYACQgVJgAmAgUmBAkCBUgpAQFVuAFWEEjldQYACCEVuAFWEEs1dQYAFgoGACCgODFmAAkIFSYAJgIFJgQJAgVIKBARFbFWEFJVdgAWCgYAIKA4CFFmAAgYFSYAJgIFJgQICCIIBUh5ADkFWShhaAglKQg5AggFSGAZBVkX/d8lKtG+LIm2nCsGj8N42qlSun8WPEoRYo9VpN9SOz75CFkFGQgVJgIAFgQFGAkQOQo1BgAWEFKVZbUGAAW5OSUFBQVltgEoFWW2ABYKBgAgoDFmAAkIFSYAJgIFJgQJAgVJBWW2ABVGABYKBgAgoDFoFWW2BAgFGQgQFgQFJgA4FSf0JPWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYCCCAVKBVltgAWCgYAIKAzMWYACQgVJgAmAgUmBAgSBUgpAQgBWQYQW/V1BgAIIRW4AVYQXkV1BgAWCgYAIKA4MWYACQgVJgAmAgUmBAkCBUgoEBEVsVYQZWV2ABYKBgAgoDM4EWYACBgVJgAmAgUmBAgIIggFSHkAOQVZKGFoCCUpCDkCCAVIYBkFWRf93yUq0b4sibacKwaPw3jaqVK6fxY8ShFij1Wk31I7PvkIWQUZCBUmAgAWBAUYCRA5CjUGABYQMvVltQYABhAy9WW2ABYKBgAgoDkYIWYACQgVJgA2AgkIFSYECAgyCTkJQWglKRkJFSIFSQVgChZWJ6enIwWCDq28gyw0CzLC5VcMVA3+Pu3Cf7frgVp4J/Lu3VK5osxwApgICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJqDLKwB1ayjnGFKooL0o13liPOekL+icq5jU0ocx60dVM6AMccBeb/7+8amxZ9Gpq0RnAJNIXTfJK6KD4g/MlTGB+A=="
	fmt.Printf("h1==h2=%t\n",h1==h2)
}

func TestReflect(t *testing.T)  {
	mp := map[string]interface{}{
		"addr":"abc",
		"signed_tx":"ssssss",
	}

	fmt.Printf("mp=%v\n",mp)

	ptr := new(req.ReqSendTx)
	fmt.Printf("ptr=%+v\n",ptr)

	elm := reflect.TypeOf(ptr).Elem()

	vl := reflect.ValueOf(ptr)

	for i := 0;i<elm.NumField();i++{
		f := elm.Field(i)
		fmt.Printf("f.tp=%v,f.kd=%v\n",f.Type,f.Type.Kind())
		tag := f.Tag.Get("json")
		fmt.Println(f.Tag.Get("json")+"："+mp[tag].(string))
		vl.Elem().Field(i).SetString(mp[tag].(string))
	}

	fmt.Printf("反转结果：%+v\n",ptr)

}